plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.9' //
    id 'io.spring.dependency-management' version '1.1.4' //
    id 'jacoco' //
}

group = 'com.clouds'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0' // JUnit 5
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0' // JUnit 5
    testImplementation 'org.testng:testng:7.7.0'

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'


    developmentOnly 'org.springframework.boot:spring-boot-devtools'


    runtimeOnly 'org.postgresql:postgresql'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

//
jacoco {
    toolVersion = "0.8.11" //
}

test {
    finalizedBy jacocoTestReport //
    finalizedBy jacocoTestCoverageVerification //
}


def jacocoExcluded = [
    "com/clouds/cloud_sprint/model/*", //
    "com/clouds/cloud_sprint/config/*" //
]

jacocoTestReport {
    dependsOn test //
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcluded)
        }))
    }
    reports {
        xml.required = true //
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn test //
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcluded)
        }))
    }
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.7 // (70%)
            }
        }
    }
}